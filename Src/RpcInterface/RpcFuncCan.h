/*
 * Copyright 2023 ZF Friedrichshafen AG
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#ifndef RPCFUNCCAN_H
#define RPCFUNCCAN_H

#include <stdint.h>

//#include "canfifo.h"
#include "RpcFuncBase.h"

#ifdef _WIN32
#ifdef __GNUC__
#pragma ms_struct on
#endif
#endif
#pragma pack(push,1)

#define CAN_CMD_OFFSET  200


#define RPC_API_LOAD_CAN_VARIANTE_CMD         (CAN_CMD_OFFSET+0)
typedef struct {
#define RPC_API_LOAD_CAN_VARIANTE_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t OffsetCanFile;\
    int32_t Channel;\
    char Data[1];  // > 1Byte!
    RPC_API_LOAD_CAN_VARIANTE_MESSAGE_MEMBERS
} RPC_API_LOAD_CAN_VARIANTE_MESSAGE;

typedef struct {
#define RPC_API_LOAD_CAN_VARIANTE_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_LOAD_CAN_VARIANTE_MESSAGE_ACK_MEMBERS
} RPC_API_LOAD_CAN_VARIANTE_MESSAGE_ACK;

#define RPC_API_LOAD_AND_SEL_CAN_VARIANTE_CMD         (CAN_CMD_OFFSET+1)
typedef struct {
#define RPC_API_LOAD_AND_SEL_CAN_VARIANTE_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t OffsetCanFile;\
    int32_t Channel;\
    char Data[1];  // > 1Byte!
    RPC_API_LOAD_AND_SEL_CAN_VARIANTE_MESSAGE_MEMBERS
} RPC_API_LOAD_AND_SEL_CAN_VARIANTE_MESSAGE;

typedef struct {
#define RPC_API_LOAD_AND_SEL_CAN_VARIANTE_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_LOAD_AND_SEL_CAN_VARIANTE_MESSAGE_ACK_MEMBERS
} RPC_API_LOAD_AND_SEL_CAN_VARIANTE_MESSAGE_ACK;

#define RPC_API_APPEND_CAN_VARIANTE_CMD         (CAN_CMD_OFFSET+2)
typedef struct {
#define RPC_API_APPEND_CAN_VARIANTE_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t OffsetCanFile;\
    int32_t Channel;\
    char Data[1];  // > 1Byte!
    RPC_API_APPEND_CAN_VARIANTE_MESSAGE_MEMBERS
} RPC_API_APPEND_CAN_VARIANTE_MESSAGE;

typedef struct {
#define RPC_API_APPEND_CAN_VARIANTE_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_APPEND_CAN_VARIANTE_MESSAGE_ACK_MEMBERS
} RPC_API_APPEND_CAN_VARIANTE_MESSAGE_ACK;

#define RPC_API_DEL_ALL_CAN_VARIANTE_CMD         (CAN_CMD_OFFSET+3)
typedef struct {
#define RPC_API_DEL_ALL_CAN_VARIANTE_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;
    RPC_API_DEL_ALL_CAN_VARIANTE_MESSAGE_MEMBERS
} RPC_API_DEL_ALL_CAN_VARIANTE_MESSAGE;

typedef struct {
#define RPC_API_DEL_ALL_CAN_VARIANTE_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_DEL_ALL_CAN_VARIANTE_MESSAGE_ACK_MEMBERS
} RPC_API_DEL_ALL_CAN_VARIANTE_MESSAGE_ACK;

#define RPC_API_TRANSMIT_CAN_CMD         (CAN_CMD_OFFSET+4)
typedef struct {
#define RPC_API_TRANSMIT_CAN_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t Channel;\
    int32_t Id;\
    int32_t Ext;\
    int32_t Size;\
    int32_t Offset_uint8_Size_Data;\
    char Data[1];  // > 1Byte!
    RPC_API_TRANSMIT_CAN_MESSAGE_MEMBERS
} RPC_API_TRANSMIT_CAN_MESSAGE;

typedef struct {
#define RPC_API_TRANSMIT_CAN_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_TRANSMIT_CAN_MESSAGE_ACK_MEMBERS
} RPC_API_TRANSMIT_CAN_MESSAGE_ACK;


// Queues

#define RPC_API_OPEN_CAN_QUEUE_CMD         (CAN_CMD_OFFSET+5)
typedef struct {
#define RPC_API_OPEN_CAN_QUEUE_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t Depth;
    RPC_API_OPEN_CAN_QUEUE_MESSAGE_MEMBERS
} RPC_API_OPEN_CAN_QUEUE_MESSAGE;

typedef struct {
#define RPC_API_OPEN_CAN_QUEUE_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_OPEN_CAN_QUEUE_MESSAGE_ACK_MEMBERS
} RPC_API_OPEN_CAN_QUEUE_MESSAGE_ACK;


#define RPC_API_SET_CAN_ACCEPTANCE_WINDOWS_CMD         (CAN_CMD_OFFSET+6)
typedef struct {
#define RPC_API_SET_CAN_ACCEPTANCE_WINDOWS_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t Size;\
    int32_t Offset_CanAcceptance_Size_Windows;\
    char Data[1];  // > 1Byte!
    RPC_API_SET_CAN_ACCEPTANCE_WINDOWS_MESSAGE_MEMBERS
} RPC_API_SET_CAN_ACCEPTANCE_WINDOWS_MESSAGE;

typedef struct {
#define RPC_API_SET_CAN_ACCEPTANCE_WINDOWS_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_SET_CAN_ACCEPTANCE_WINDOWS_MESSAGE_ACK_MEMBERS
} RPC_API_SET_CAN_ACCEPTANCE_WINDOWS_MESSAGE_ACK;

#define RPC_API_FLUSH_CAN_QUEUE_CMD         (CAN_CMD_OFFSET+7)
typedef struct {
#define RPC_API_FLUSH_CAN_QUEUE_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t Flags;
    RPC_API_FLUSH_CAN_QUEUE_MESSAGE_MEMBERS
} RPC_API_FLUSH_CAN_QUEUE_MESSAGE;

typedef struct {
#define RPC_API_FLUSH_CAN_QUEUE_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_FLUSH_CAN_QUEUE_MESSAGE_ACK_MEMBERS
} RPC_API_FLUSH_CAN_QUEUE_MESSAGE_ACK;

#define RPC_API_READ_CAN_QUEUE_CMD         (CAN_CMD_OFFSET+8)
typedef struct {
#define RPC_API_READ_CAN_QUEUE_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t ReadMaxElements;
    RPC_API_READ_CAN_QUEUE_MESSAGE_MEMBERS
} RPC_API_READ_CAN_QUEUE_MESSAGE;

typedef struct {
#define RPC_API_READ_CAN_QUEUE_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;\
    int32_t ReadElements;\
    int32_t Offset_CanObject_ReadElements_Messages;\
    char Data[1];  // > 1Byte!
    RPC_API_READ_CAN_QUEUE_MESSAGE_ACK_MEMBERS
} RPC_API_READ_CAN_QUEUE_MESSAGE_ACK;

#define RPC_API_TRANSMIT_CAN_QUEUE_CMD         (CAN_CMD_OFFSET+9)
typedef struct {
#define RPC_API_TRANSMIT_CAN_QUEUE_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t WriteElements;\
    int32_t Offset_CanObject_WriteElements_Messages;\
    char Data[1];  // > 1Byte!
    RPC_API_TRANSMIT_CAN_QUEUE_MESSAGE_MEMBERS
} RPC_API_TRANSMIT_CAN_QUEUE_MESSAGE;

typedef struct {
#define RPC_API_TRANSMIT_CAN_QUEUE_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_TRANSMIT_CAN_QUEUE_MESSAGE_ACK_MEMBERS
} RPC_API_TRANSMIT_CAN_QUEUE_MESSAGE_ACK;

#define RPC_API_CLOSE_CAN_QUEUE_CMD         (CAN_CMD_OFFSET+10)
typedef struct {
#define RPC_API_CLOSE_CAN_QUEUE_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;
    RPC_API_CLOSE_CAN_QUEUE_MESSAGE_MEMBERS
} RPC_API_CLOSE_CAN_QUEUE_MESSAGE;

typedef struct {
#define RPC_API_CLOSE_CAN_QUEUE_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_CLOSE_CAN_QUEUE_MESSAGE_ACK_MEMBERS
} RPC_API_CLOSE_CAN_QUEUE_MESSAGE_ACK;

// CAN-Bit-Error

#define RPC_API_SET_CAN_ERR_CMD         (CAN_CMD_OFFSET+11)
typedef struct {
#define RPC_API_SET_CAN_ERR_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t Channel;\
    int32_t Id;\
    int32_t Startbit;\
    int32_t Bitsize;\
    int32_t OffsetByteorder;\
    uint32_t Cycles;\
    uint64_t BitErrValue;\
    char Data[1];  // > 1Byte!
    RPC_API_SET_CAN_ERR_MESSAGE_MEMBERS
} RPC_API_SET_CAN_ERR_MESSAGE;

typedef struct {
#define RPC_API_SET_CAN_ERR_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_SET_CAN_ERR_MESSAGE_ACK_MEMBERS
} RPC_API_SET_CAN_ERR_MESSAGE_ACK;

#define RPC_API_SET_CAN_ERR_SIGNAL_NAME_CMD         (CAN_CMD_OFFSET+12)
typedef struct {
#define RPC_API_SET_CAN_ERR_SIGNAL_NAME_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t Channel;\
    int32_t Id;\
    int32_t OffsetSignalName;\
    uint32_t Cycles;\
    uint64_t BitErrValue;\
    char Data[1];  // > 1Byte!
    RPC_API_SET_CAN_ERR_SIGNAL_NAME_MESSAGE_MEMBERS
} RPC_API_SET_CAN_ERR_SIGNAL_NAME_MESSAGE;

typedef struct {
#define RPC_API_SET_CAN_ERR_SIGNAL_NAME_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_SET_CAN_ERR_SIGNAL_NAME_MESSAGE_ACK_MEMBERS
} RPC_API_SET_CAN_ERR_SIGNAL_NAME_MESSAGE_ACK;

#define RPC_API_CLEAR_CAN_ERR_CMD         (CAN_CMD_OFFSET+13)
typedef struct {
#define RPC_API_CLEAR_CAN_ERR_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;
    RPC_API_CLEAR_CAN_ERR_MESSAGE_MEMBERS
} RPC_API_CLEAR_CAN_ERR_MESSAGE;

typedef struct {
#define RPC_API_CLEAR_CAN_ERR_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_CLEAR_CAN_ERR_MESSAGE_ACK_MEMBERS
} RPC_API_CLEAR_CAN_ERR_MESSAGE_ACK;


#define RPC_API_SET_CAN_SIGNAL_CONVERTION_CMD         (CAN_CMD_OFFSET+14)
typedef struct {
#define RPC_API_SET_CAN_SIGNAL_CONVERTION_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t Channel;\
    int32_t Id;\
    int32_t OffsetSignalName;\
    int32_t OffsetConvertion;\
    char Data[1];  // > 1Byte!
    RPC_API_SET_CAN_SIGNAL_CONVERTION_MESSAGE_MEMBERS
} RPC_API_SET_CAN_SIGNAL_CONVERTION_MESSAGE;

typedef struct {
#define RPC_API_SET_CAN_SIGNAL_CONVERTION_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_SET_CAN_SIGNAL_CONVERTION_MESSAGE_ACK_MEMBERS
} RPC_API_SET_CAN_SIGNAL_CONVERTION_MESSAGE_ACK;

#define RPC_API_RESET_CAN_SIGNAL_CONVERTION_CMD         (CAN_CMD_OFFSET+15)
typedef struct {
#define RPC_API_RESET_CAN_SIGNAL_CONVERTION_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t Channel;\
    int32_t Id;\
    int32_t OffsetSignalName;\
    char Data[1];  // > 1Byte!
    RPC_API_RESET_CAN_SIGNAL_CONVERTION_MESSAGE_MEMBERS
} RPC_API_RESET_CAN_SIGNAL_CONVERTION_MESSAGE;

typedef struct {
#define RPC_API_RESET_CAN_SIGNAL_CONVERTION_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_RESET_CAN_SIGNAL_CONVERTION_MESSAGE_ACK_MEMBERS
} RPC_API_RESET_CAN_SIGNAL_CONVERTION_MESSAGE_ACK;

#define RPC_API_RESET_ALL_CAN_SIGNAL_CONVERTION_CMD         (CAN_CMD_OFFSET+16)
typedef struct {
#define RPC_API_RESET_ALL_CAN_SIGNAL_CONVERTION_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t Channel;\
    int32_t Id;
    RPC_API_RESET_ALL_CAN_SIGNAL_CONVERTION_MESSAGE_MEMBERS
} RPC_API_RESET_ALL_CAN_SIGNAL_CONVERTION_MESSAGE;

typedef struct {
#define RPC_API_RESET_ALL_CAN_SIGNAL_CONVERTION_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_RESET_ALL_CAN_SIGNAL_CONVERTION_MESSAGE_ACK_MEMBERS
} RPC_API_RESET_ALL_CAN_SIGNAL_CONVERTION_MESSAGE_ACK;

#define RPC_API_SET_CAN_CHANNEL_COUNT_CMD         (CAN_CMD_OFFSET+18)
typedef struct {
#define  RPC_API_SET_CAN_CHANNEL_COUNT_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t ChannelCount;
    RPC_API_SET_CAN_CHANNEL_COUNT_MESSAGE_MEMBERS
}  RPC_API_SET_CAN_CHANNEL_COUNT_MESSAGE;

typedef struct {
#define  RPC_API_SET_CAN_CHANNEL_COUNT_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
     RPC_API_SET_CAN_CHANNEL_COUNT_MESSAGE_ACK_MEMBERS
}  RPC_API_SET_CAN_CHANNEL_COUNT_MESSAGE_ACK;



// CAN FD

#define RPC_API_TRANSMIT_CAN_FD_CMD         (CAN_CMD_OFFSET+19)
typedef struct {
#define RPC_API_TRANSMIT_CAN_FD_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t Channel;\
    int32_t Id;\
    int32_t Ext;\
    int32_t Size;\
    int32_t Offset_uint8_Size_Data;\
    char Data[1];  // > 1Byte!
    RPC_API_TRANSMIT_CAN_FD_MESSAGE_MEMBERS
} RPC_API_TRANSMIT_CAN_FD_MESSAGE;

typedef struct {
#define RPC_API_TRANSMIT_CAN_FD_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_TRANSMIT_CAN_FD_MESSAGE_ACK_MEMBERS
} RPC_API_TRANSMIT_CAN_FD_MESSAGE_ACK;

#define RPC_API_OPEN_CAN_FD_QUEUE_CMD         (CAN_CMD_OFFSET+20)
typedef struct {
#define RPC_API_OPEN_CAN_FD_QUEUE_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t Depth; \
    int32_t FdFlag;
    RPC_API_OPEN_CAN_FD_QUEUE_MESSAGE_MEMBERS
} RPC_API_OPEN_CAN_FD_QUEUE_MESSAGE;

typedef struct {
#define RPC_API_OPEN_CAN_FD_QUEUE_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_OPEN_CAN_FD_QUEUE_MESSAGE_ACK_MEMBERS
} RPC_API_OPEN_CAN_FD_QUEUE_MESSAGE_ACK;

#define RPC_API_READ_CAN_FD_QUEUE_CMD         (CAN_CMD_OFFSET+21)
typedef struct {
#define RPC_API_READ_CAN_FD_QUEUE_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t ReadMaxElements;
    RPC_API_READ_CAN_FD_QUEUE_MESSAGE_MEMBERS
} RPC_API_READ_CAN_FD_QUEUE_MESSAGE;

typedef struct {
#define RPC_API_READ_CAN_FD_QUEUE_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;\
    int32_t ReadElements;\
    int32_t Offset_CanFdObject_ReadElements_Messages;\
    char Data[1];  // > 1Byte!
    RPC_API_READ_CAN_FD_QUEUE_MESSAGE_ACK_MEMBERS
} RPC_API_READ_CAN_FD_QUEUE_MESSAGE_ACK;

#define RPC_API_TRANSMIT_CAN_FD_QUEUE_CMD         (CAN_CMD_OFFSET+22)
typedef struct {
#define RPC_API_TRANSMIT_CAN_FD_QUEUE_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t WriteElements;\
    int32_t Offset_CanFdObject_WriteElements_Messages;\
    char Data[1];  // > 1Byte!
    RPC_API_TRANSMIT_CAN_FD_QUEUE_MESSAGE_MEMBERS
} RPC_API_TRANSMIT_CAN_FD_QUEUE_MESSAGE;

typedef struct {
#define RPC_API_TRANSMIT_CAN_FD_QUEUE_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_TRANSMIT_CAN_FD_QUEUE_MESSAGE_ACK_MEMBERS
} RPC_API_TRANSMIT_CAN_FD_QUEUE_MESSAGE_ACK;

#define RPC_API_START_CAN_RECORDER_CMD         (CAN_CMD_OFFSET+23)
typedef struct {
#define RPC_API_START_CAN_RECORDER_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;\
    int32_t Offset_FileName;\
    int32_t Offset_Equation;\
    int32_t DisplayColumnCounterFlag;\
    int32_t DisplayColumnTimeAbsoluteFlag;\
    int32_t DisplayColumnTimeDiffFlag;\
    int32_t DisplayColumnTimeDiffMinMaxFlag;\
    int32_t Size;\
    int32_t Offset_CanAcceptance_Size_Windows;\
    char Data[1];  // > 1Byte!
    RPC_API_START_CAN_RECORDER_MESSAGE_MEMBERS
} RPC_API_START_CAN_RECORDER_MESSAGE;

typedef struct {
#define RPC_API_START_CAN_RECORDER_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_START_CAN_RECORDER_MESSAGE_ACK_MEMBERS
} RPC_API_START_CAN_RECORDER_MESSAGE_ACK;

#define RPC_API_STOP_CAN_RECORDER_CMD         (CAN_CMD_OFFSET+24)
typedef struct {
#define RPC_API_STOP_CAN_RECORDER_MESSAGE_MEMBERS \
    RPC_API_BASE_MESSAGE Header;
    RPC_API_STOP_CAN_RECORDER_MESSAGE_MEMBERS
} RPC_API_STOP_CAN_RECORDER_MESSAGE;

typedef struct {
#define RPC_API_STOP_CAN_RECORDER_MESSAGE_ACK_MEMBERS \
    RPC_API_BASE_MESSAGE_ACK Header;
    RPC_API_STOP_CAN_RECORDER_MESSAGE_ACK_MEMBERS
} RPC_API_STOP_CAN_RECORDER_MESSAGE_ACK;

#pragma pack(pop)
#ifdef _WIN32
#ifdef __GNUC__
#pragma ms_struct reset
#endif
#endif
int AddCanFunctionToTable(void);

#endif // RPCFUNCCAN_H
